import{useExtCenterStore as P,BaseViewModel as m,apiParserNext as l,isError as H}from"./main-f7BGirYr.js";import"../assets/index-FfF0Lcw0.js";class S{getExtInfo(){return P().info}getExt(){return P().ext}}const c=new S;var n=(e=>(e[e.DEFAULT=0]="DEFAULT",e[e.STA=1]="STA",e[e.AP=2]="AP",e[e.P2P=3]="P2P",e))(n||{});const E=8,L=16,F=1,v=50,x=8;class I{constructor(s,t){this.wifiName=s,this.wifiPwd=t}}class T{}class _{constructor(s,t){this.wifiName=s,this.wifiPwd=t}}class u{constructor(s){this.ssid=s}}class O{constructor(s,t){this.wifiName=s,this.wifiPwd=t}}class A{}class W{}const d=/^xTool_(.*?)_v2_/,p="192.168.40.1",w="HOTSPOT_PASSWORD_MAP",g=[{name:"getHostpotInfo",url:"/net/wifi_mode",type:"post"},{name:"setWifi",url:"/net/set_wifi",method:"post"}];class G extends m{createState(){return{cur_mode:n.DEFAULT,hotspotName:"",hotspotPassword:"",wifiName:"",wifiPassword:"",wifiList:[],isWifiListLoading:!1}}setEventHandler(){this.registerEventHandler(I,this.setHotspotInfo),this.registerEventHandler(T,()=>this.getHotspotInfo(n.AP)),this.registerEventHandler(_,this.saveHotspotPassword),this.registerEventHandler(u,this.getHotspotPassword),this.registerEventHandler(O,this.setWifiInfo),this.registerEventHandler(A,()=>this.getHotspotInfo(n.STA)),this.registerEventHandler(W,this.getWifiList)}async setHotspotInfo(s){const t={username:s.wifiName,passwd:s.wifiPwd};if(d.test(t.username??"")===!1){this.sendEffect({showFailToast:{msgKey:"mobile.connect.try_update_firmware"}});return}const o=n.AP;try{const i={...t},a=c.getExtInfo().ip||p,r=l(g,a);t.username=t.username.replace(d,""),t.passwd=encodeURI(t.passwd),Object.assign(t,{mode:o}),console.log(`[ACTION.SET_HOTSPOT_INFO] data =${JSON.stringify(t)}`);const f=await r.setWifi({data:t});console.log(`[ACTION.SET_HOTSPOT_INFO]${f}`),o===2&&(this.setHotspotPassword(i.username,i.passwd),console.log("setHotspotInfo setHotspotPassword",i)),this.sendEffect({showSuccessToast:{msgKey:"mobile.connect.modify_password_success"}});try{await this.getHotspotInfo(o)}catch(h){console.log(`getHotspotInfo: ${h}`)}}catch(i){console.error("[ACTION.SET_HOTSPOT_INFO]",i),i&&i.code===404?this.sendEffect({showFailToast:{msgKey:"mobile.connect.try_update_firmware"}}):this.sendEffect({showFailToast:{msgKey:"mobile.connect.modify_password_fail"}})}}async getHotspotInfo(s){try{const t=c.getExtInfo().ip||p,o=l(g,t),i={mode:s},a=await o.getHostpotInfo({data:i});console.log("[ACTION.GET_HOTSPOT_INFO]",a.username,a.passwd,a.cur_mode),this.updateState({cur_mode:a.cur_mode}),s===n.STA?this.updateState({wifiName:a.username,wifiPassword:a.passwd}):s===n.AP&&this.updateState({hotspotName:a.username,hotspotPassword:a.passwd})}catch(t){console.error(`[ACTION.GET_HOTSPOT_INFO]${t}`)}}saveHotspotPassword(s){this.setHotspotPassword(s.wifiName,s.wifiPwd)}setHotspotPassword(s,t){console.log("setHotspotPassword",s,t);const o=JSON.parse(localStorage.getItem(w)??"{}");o[s]=t,console.log("setHotspotPassword",o),localStorage.setItem(w,JSON.stringify(o))}getHotspotPassword(s){const t=s.ssid;console.log("getHotspotPassword",t);const o=JSON.parse(localStorage.getItem(w)??"{}");console.log("getHotspotPassword",o);const i=o[t];this.updateState({hotspotPassword:i})}async setWifiInfo(s){const t=s.wifiName;let o=s.wifiPwd;try{const i=c.getExtInfo().ip||p,a=l(g,i);o=encodeURI(o);const r={username:t,passwd:o};console.log(`[ACTION.SET_WIFI_INFO] data =${JSON.stringify(r)}`);const f=await a.setWifi({data:r});!H(f)?this.sendEffect({showSuccessToast:{msgKey:"mobile.connect.hotspot_config_success"}}):this.sendEffect({showFailToast:{msgKey:"mobile.connect.hotspot_config_fail"}})}catch(i){console.error(`setWifiInfo:${i}`),this.sendEffect({showFailToast:{msgKey:"mobile.connect.hotspot_config_fail"}})}}async getWifiList(){var t;const s=c.getExt();try{this.updateState({isWifiListLoading:!0});const o=await((t=s==null?void 0:s.apis)==null?void 0:t.listWifi())??[];console.log("getWifiList",o);const i=o.filter(a=>!d.test(a));console.log("filtered wifiList",i),this.updateState({wifiList:i})}catch(o){console.error(`getWifiList:${o}`)}finally{this.updateState({isWifiListLoading:!1})}}}export{T as GetHotspotInfoEvent,A as GetWifiInfoEvent,W as GetWifiListEvent,L as HOTSPOT_PASSWORD_MAX_LENGTH,E as HOTSPOT_PASSWORD_MIN_LENGTH,G as HotspotConfigViewModel,n as MODE_DEVICE_CONNECT,_ as SaveHotspotPasswordEvent,I as SetHotspotInfoEvent,O as SetWifiInfoEvent,v as WIFI_NAME_MAX_LENGTH,F as WIFI_NAME_MIN_LENGTH,x as WIFI_PASSWORD_MIN_LENGTH};
