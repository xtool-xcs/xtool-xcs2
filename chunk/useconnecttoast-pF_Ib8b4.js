var I=Object.defineProperty;var v=(n,a,t)=>a in n?I(n,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[a]=t;var h=(n,a,t)=>(v(n,typeof a!="symbol"?a+"":a,t),t);import{BaseViewModel as C,NativeApi as H,deviceManager as l,xcsApp as p,AppType as S,deviceService as L,HOTSPOT_PREFIX as m,useExtCenterStore as g,HOTSPOT_DEVICE_IP as y,HOTSPOT_PASSWORD_MAP as w}from"./main-f7BGirYr.js";import{lodashExports as D}from"../assets/index-FfF0Lcw0.js";import{useI18n as P}from"./importmap-vue-i18n-LlhaB8iP.js";import{useRouter as T}from"./importmap-vue-router-aHGpzyJi.js";class N{constructor(a,t,e=!0){this.ip=a,this.isCloseLasted=t,this.isShowSwitchDevice=e}}class B extends C{constructor(){super(...arguments);h(this,"lastConnectedDevice",null);h(this,"isCloseLasted",!1)}createState(){return{connectLoadingVisible:!1}}setEventHandler(){this.registerEventHandler(N,this.connectDeviceByIp)}async connectDeviceByIp(t){var s;if(!await H.requestNetPermission()){this.updateState({connectLoadingVisible:!1}),this.sendEffect({showGrantNetPermissionDialog:{},connectFail:{}});return}try{if(this.uiState.connectLoadingVisible)return;this.isCloseLasted=t.isCloseLasted,this.updateState({connectLoadingVisible:!0});const i=t.ip;if(!i){this.sendEffect({showToast:{msgKey:"device.connect.enter_ip_address"}}),this.updateState({connectLoadingVisible:!1});return}if(!/^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/.test(i)){this.sendEffect({showToast:{msgKey:"device.connect.ip_input_error_massage"}}),this.updateState({connectLoadingVisible:!1});return}if(l.connectIdentityList.includes(i)&&p.appType==S.App){this.updateState({connectLoadingVisible:!1}),this.sendEffect({connectSuccess:{}});return}const o=await((s=L)==null?void 0:s.getInfoByIp(i));if(!o)throw new Error("无效 IP");await this.connectDevice(o,t.isShowSwitchDevice)}catch(i){console.log(i),this.updateState({connectLoadingVisible:!1}),this.sendEffect({connectFail:{failReason:i.message}})}}async connectDevice(t,e){this.lastConnectedDevice=t,p.appType==S.App&&l.extId&&t.product!==l.extId?(this.updateState({connectLoadingVisible:!1}),p.modal.showSwitchDeviceModal({type:"extId",onConfirm:()=>{this.updateState({connectLoadingVisible:!0}),this.confirmConnectDevice(t,!1)},onCancel:()=>{this.updateState({connectLoadingVisible:!1})}})):await this.confirmConnectDevice(t,e)}async confirmConnectDevice(t,e){var d;let s=!1;const{extId:i}=t,c=l.ext;let o=null;try{if(!await H.requestNetPermission())throw new Error("没有本地网络权限");if(l.connectIdentityList.includes(t.ip)){const u=l.getConnectDevice(t.ip);u!=null&&(o=u)}else{const u=await l.loadExt(i);o=await l.connectExt(u,t)}await l.updateCurrentInstanceId(o,()=>{},()=>{l.closeConnect(o.instanceId)},!0,e),s=!0,this.isCloseLasted&&await this.closeAndRemoveLastDevice(c,o)}catch(r){console.log(r),(d=o==null?void 0:o.device)==null||d.destroyWorker(),this.sendEffect({connectFail:{failReason:r.message}})}finally{this.isCloseLasted&&await this.closeAndRemoveLastDevice(c,o)}this.updateState({connectLoadingVisible:!1}),s&&(this.updateState({currentConnectedDevice:t}),this.sendEffect({connectSuccess:{}}))}async closeAndRemoveLastDevice(t,e){t&&e&&t!=e&&(t==null?void 0:t.instanceId)!=(e==null?void 0:e.instanceId)&&l.closeAndRemoveDevice(t==null?void 0:t.instanceId)}}class A{}class E{}class k{constructor(a){this.hotspotInfo=a}}class V{}class b{constructor(a,t){this.ssid=a,this.password=t}}class F extends C{constructor(){super(...arguments);h(this,"lastConnectedDevice",null);h(this,"isConnectingHotspot",!1);h(this,"currentClickHotspotItem",null)}createState(){return{hotspotList:[],hotspotName:"",connectLoadingVisible:!1,isShowSwitchDeviceDialog:!1,isLoadingHotspotList:!1,isConnectHotspotLoading:!1}}setEventHandler(){this.registerEventHandler(k,this.connectDevice),this.registerEventHandler(E,this.getHotspotList),this.registerEventHandler(A,this.getHotspotName),this.registerEventHandler(V,this.connectDeviceSuccess),this.registerEventHandler(b,this.connectHotspot)}async getHotspotList(){this.updateState({isLoadingHotspotList:!0});const t=window.MeApi;try{const e=await t.wifi.getWifiList(),i=JSON.parse(e).filter(c=>m.test(c.ssid)).map(c=>({name:this.sliceType(c.ssid),ssid:c.ssid,hasPassword:c.hasPassword}));this.updateState({hotspotList:i}),console.log("getHotspotList",i)}catch(e){console.error("getHotspotList",e)}finally{this.updateState({isLoadingHotspotList:!1})}}sliceType(t){const s=(m.exec(t)??[])[1];return console.log("sliceType productType:",s),s}async getHotspotName(){if(console.log("getHotspotName"),await window.MeApi.permission.isGrantedLocationPermission()){const s=await window.MeApi.wifi.getWifiName();console.log("getHotspotName wifiName",s),this.updateState({hotspotName:s??""})}}checkIsDifferentType(t){const e=g().extId;return!(!e||e.trim()===""||e===this.sliceType(t))}async connectDevice(t){var d;const e=t.hotspotInfo;if(this.isConnectingHotspot)return;this.isConnectingHotspot=!0,this.currentClickHotspotItem=e;let s=!1,i=!1;const c=this.checkIsDifferentType(e.ssid),o=await window.MeApi.wifi.getWifiName();this.updateState({hotspotName:o}),o&&g().connected&&o===e.ssid&&(s=!0),(!o||!m.test(o)||((d=this.currentClickHotspotItem)==null?void 0:d.ssid)!==o)&&this.currentClickHotspotItem.hasPassword&&(this.getHotspotPassword(this.currentClickHotspotItem.ssid)||(i=!0)),c&&!i&&!s?p.modal.showSwitchDeviceModal({type:"extId",onConfirm:()=>{this.hotspotItemHandle(!1)},onCancel:()=>{}}):await this.hotspotItemHandle(!0),this.isConnectingHotspot=!1}async hotspotItemHandle(t){if(console.log("selectItemHandle",this.currentClickHotspotItem),!D.isNull(this.currentClickHotspotItem)){try{const e=await window.MeApi.wifi.getWifiName();if(this.updateState({hotspotName:e}),console.log(`selectItemHandle curWifiName=${e}}`),e&&m.test(e)&&this.currentClickHotspotItem.ssid===e)g().connected?this.sendEffect({connectSuccess:{}}):await this.didConnectHotspotHandler(t);else if(this.currentClickHotspotItem.hasPassword){const s=this.getHotspotPassword(this.currentClickHotspotItem.ssid);if(console.log("selectItemHandle lastPwd",s),s){this.updateState({connectLoadingVisible:!0});const i=await window.MeApi.wifi.connectWifi(this.currentClickHotspotItem.ssid,s);this.updateState({connectLoadingVisible:!1}),i===-1?await this.didConnectHotspotHandler(t):(this.setHotspotPassword(this.currentClickHotspotItem.ssid,""),this.sendEffect({routeToSetPassword:this.currentClickHotspotItem}))}else this.sendEffect({routeToSetPassword:this.currentClickHotspotItem})}else await window.MeApi.wifi.connectWifi(this.currentClickHotspotItem.ssid,"")===-1?await this.didConnectHotspotHandler(t):this.sendEffect({connectFail:{}})}catch(e){console.log("selectItemHandle",e),this.sendEffect({connectFail:{}})}this.isConnectingHotspot=!1}}async didConnectHotspotHandler(t){console.log("didConnectHotspotHandler "),await setTimeout(()=>{},.5),this.sendEffect({connectDeviceByIp:{ip:y,isShowSwitchDevice:t}})}setHotspotPassword(t,e){console.log("setHotspotPassword",t,e);const s=JSON.parse(localStorage.getItem(w)??"{}");s[t]=e,console.log("setHotspotPassword",s),localStorage.setItem(w,JSON.stringify(s))}getHotspotPassword(t){console.log("getHotspotPassword",t);const e=JSON.parse(localStorage.getItem(w)??"{}");return console.log("getHotspotPassword",e),e[t]}connectDeviceSuccess(){this.recodeHotSpotData()}recodeHotSpotData(){const t=JSON.parse(localStorage.getItem("hotSpotData")??"{}");t.x=(t.x??0)+1,localStorage.setItem("hotSpotData",JSON.stringify(t))}async connectHotspot(t){this.updateState({isConnectHotspotLoading:!0});let e=0;try{e=await window.MeApi.wifi.connectWifi(t.ssid,t.password)}catch(s){console.error("connectHotspot error",s),e=0}this.updateState({isConnectHotspotLoading:!1}),e===-1?this.sendEffect({ConnectHotspotSuccess:{}}):this.sendEffect({ConnectHotspotFail:{}})}}let f=null;const J=()=>{const{t:n}=P(),a=T(),t=()=>{f=p.modal.showToast({duration:0,msg:n("mobile.connect.connect_loading_tip"),overlay:!0,icon:"loading",uniqueId:"connectToast"})},e=()=>{s();const r=p.modal.showToast({duration:0,msg:n("mobile.connect.connect_success"),icon:"success",overlay:!0});setTimeout(()=>{r.close(),a.back()},800)},s=()=>{var r;(r=f==null?void 0:f.close)==null||r.call(f)},i=()=>{s(),p.modal.showToast({msg:n("device.connect.connect_failed"),icon:"error"})};let c=null;const o=()=>{d(),c=p.modal.showToast({msg:n("device.connect.device_refresh"),icon:"loading",duration:0,uniqueId:"refreshToast",topDistance:111})},d=()=>{var r;(r=c==null?void 0:c.close)==null||r.call(c)};return{showConnectToast:t,successToastAction:e,failToastAction:i,closeConnectToast:s,refreshDeviceToast:o,closeRereshToast:d}};export{N as ConnectByIpEvent,k as ConnectDeviceByHotspotInfoEvent,V as ConnectDeviceSuccessEvent,b as ConnectHotspotEvent,E as GetHotspotListEvent,A as GetHotspotNameEvent,B as IpViewModel,F as WifiDirectAndroidViewModel,J as useConnectToast};
